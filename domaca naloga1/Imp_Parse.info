-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Imp_Parse.y
-----------------------------------------------------------------------------

state 37 contains 1 shift/reduce conflicts.
state 49 contains 1 shift/reduce conflicts.

rule 1 is unused
rule 2 is unused
rule 3 is unused
rule 4 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_imp_parse -> Com                            (0)
	Prog ->                                            (1)
	Prog -> Decl Prog                                  (2)
	Decl -> TermDecl                                   (3)
	TermDecl -> loc Args ':=' Com ';'                  (4)
	Args ->                                            (5)
	Args -> Com Args                                   (6)
	Com -> if BExp then Com else Com                   (7)
	Com -> while BExp do Com                           (8)
	Com -> loc Args ':=' AExp                          (9)
	Com -> Com ';' Com                                 (10)
	Com -> skip                                        (11)
	BExp -> AExp '==' AExp                             (12)
	BExp -> BExp land BExp                             (13)
	BExp -> BExp lor BExp                              (14)
	BExp -> '!' BExp                                   (15)
	BExp -> Exp0                                       (16)
	AExp -> AExp '<' AExp                              (17)
	AExp -> AExp '+' AExp                              (18)
	AExp -> AExp '-' AExp                              (19)
	AExp -> AExp '*' AExp                              (20)
	AExp -> Exp0                                       (21)
	Exp0 -> num                                        (22)
	Exp0 -> boolean                                    (23)
	Exp0 -> loc                                        (24)
	Exp0 -> '(' Com ')'                                (25)
	Exp0 -> '{' Com '}'                                (26)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	if             { KEY "if" }
	then           { KEY "then" }
	else           { KEY "else" }
	while          { KEY "while" }
	do             { KEY "do" }
	skip           { KEY "skip" }
	':='           { ASS ":=" }
	'=='           { OP "==" }
	'<'            { OP "<" }
	'+'            { OP "+" }
	'-'            { OP "-" }
	'*'            { OP "*" }
	'!'            { OP "!" }
	';'            { OP ";" }
	land           { OP "&&" }
	lor            { OP "||" }
	'('            { PUNC "(" }
	')'            { PUNC ")" }
	'{'            { PUNC "{" }
	'}'            { PUNC "}" }
	num            { NUM $$ }
	boolean        { BOOLEAN $$ }
	loc            { LOC $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_imp_parse rule  0
	Prog            rules 1, 2
	Decl            rule  3
	TermDecl        rule  4
	Args            rules 5, 6
	Com             rules 7, 8, 9, 10, 11
	BExp            rules 12, 13, 14, 15, 16
	AExp            rules 17, 18, 19, 20, 21
	Exp0            rules 22, 23, 24, 25, 26

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 2

State 1




State 2

	%start_imp_parse -> Com .                           (rule 0)
	Com -> Com . ';' Com                                (rule 10)

	';'            shift, and enter state 19
	%eof           accept


State 3

	Com -> if . BExp then Com else Com                  (rule 7)

	'!'            shift, and enter state 12
	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 18
	AExp           goto state 10
	Exp0           goto state 11

State 4

	Com -> while . BExp do Com                          (rule 8)

	'!'            shift, and enter state 12
	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 9
	AExp           goto state 10
	Exp0           goto state 11

State 5

	Com -> skip .                                       (rule 11)

	if             reduce using rule 11
	else           reduce using rule 11
	while          reduce using rule 11
	skip           reduce using rule 11
	':='           reduce using rule 11
	';'            reduce using rule 11
	')'            reduce using rule 11
	'}'            reduce using rule 11
	loc            reduce using rule 11
	%eof           reduce using rule 11


State 6

	Com -> loc . Args ':=' AExp                         (rule 9)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	':='           reduce using rule 5
	loc            shift, and enter state 6

	Args           goto state 7
	Com            goto state 8

State 7

	Com -> loc Args . ':=' AExp                         (rule 9)

	':='           shift, and enter state 34


State 8

	Args -> Com . Args                                  (rule 6)
	Com -> Com . ';' Com                                (rule 10)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	':='           reduce using rule 5
	';'            shift, and enter state 19
	loc            shift, and enter state 6

	Args           goto state 33
	Com            goto state 8

State 9

	Com -> while BExp . do Com                          (rule 8)
	BExp -> BExp . land BExp                            (rule 13)
	BExp -> BExp . lor BExp                             (rule 14)

	do             shift, and enter state 32
	land           shift, and enter state 22
	lor            shift, and enter state 23


State 10

	BExp -> AExp . '==' AExp                            (rule 12)
	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)

	'=='           shift, and enter state 27
	'<'            shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31


State 11

	BExp -> Exp0 .                                      (rule 16)
	AExp -> Exp0 .                                      (rule 21)

	then           reduce using rule 16
	do             reduce using rule 16
	'=='           reduce using rule 21
	'<'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	land           reduce using rule 16
	lor            reduce using rule 16


State 12

	BExp -> '!' . BExp                                  (rule 15)

	'!'            shift, and enter state 12
	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 26
	AExp           goto state 10
	Exp0           goto state 11

State 13

	Exp0 -> '(' . Com ')'                               (rule 25)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 25

State 14

	Exp0 -> '{' . Com '}'                               (rule 26)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 24

State 15

	Exp0 -> num .                                       (rule 22)

	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	while          reduce using rule 22
	do             reduce using rule 22
	skip           reduce using rule 22
	':='           reduce using rule 22
	'=='           reduce using rule 22
	'<'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	';'            reduce using rule 22
	land           reduce using rule 22
	lor            reduce using rule 22
	')'            reduce using rule 22
	'}'            reduce using rule 22
	loc            reduce using rule 22
	%eof           reduce using rule 22


State 16

	Exp0 -> boolean .                                   (rule 23)

	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	while          reduce using rule 23
	do             reduce using rule 23
	skip           reduce using rule 23
	':='           reduce using rule 23
	'=='           reduce using rule 23
	'<'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	';'            reduce using rule 23
	land           reduce using rule 23
	lor            reduce using rule 23
	')'            reduce using rule 23
	'}'            reduce using rule 23
	loc            reduce using rule 23
	%eof           reduce using rule 23


State 17

	Exp0 -> loc .                                       (rule 24)

	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	while          reduce using rule 24
	do             reduce using rule 24
	skip           reduce using rule 24
	':='           reduce using rule 24
	'=='           reduce using rule 24
	'<'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	';'            reduce using rule 24
	land           reduce using rule 24
	lor            reduce using rule 24
	')'            reduce using rule 24
	'}'            reduce using rule 24
	loc            reduce using rule 24
	%eof           reduce using rule 24


State 18

	Com -> if BExp . then Com else Com                  (rule 7)
	BExp -> BExp . land BExp                            (rule 13)
	BExp -> BExp . lor BExp                             (rule 14)

	then           shift, and enter state 21
	land           shift, and enter state 22
	lor            shift, and enter state 23


State 19

	Com -> Com ';' . Com                                (rule 10)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 20

State 20

	Com -> Com . ';' Com                                (rule 10)
	Com -> Com ';' Com .                                (rule 10)

	if             reduce using rule 10
	else           reduce using rule 10
	while          reduce using rule 10
	skip           reduce using rule 10
	':='           reduce using rule 10
	';'            shift, and enter state 19
	')'            reduce using rule 10
	'}'            reduce using rule 10
	loc            reduce using rule 10
	%eof           reduce using rule 10


State 21

	Com -> if BExp then . Com else Com                  (rule 7)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 47

State 22

	BExp -> BExp land . BExp                            (rule 13)

	'!'            shift, and enter state 12
	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 46
	AExp           goto state 10
	Exp0           goto state 11

State 23

	BExp -> BExp lor . BExp                             (rule 14)

	'!'            shift, and enter state 12
	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 45
	AExp           goto state 10
	Exp0           goto state 11

State 24

	Com -> Com . ';' Com                                (rule 10)
	Exp0 -> '{' Com . '}'                               (rule 26)

	';'            shift, and enter state 19
	'}'            shift, and enter state 44


State 25

	Com -> Com . ';' Com                                (rule 10)
	Exp0 -> '(' Com . ')'                               (rule 25)

	';'            shift, and enter state 19
	')'            shift, and enter state 43


State 26

	BExp -> BExp . land BExp                            (rule 13)
	BExp -> BExp . lor BExp                             (rule 14)
	BExp -> '!' BExp .                                  (rule 15)

	then           reduce using rule 15
	do             reduce using rule 15
	land           reduce using rule 15
	lor            reduce using rule 15


State 27

	BExp -> AExp '==' . AExp                            (rule 12)

	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	AExp           goto state 42
	Exp0           goto state 36

State 28

	AExp -> AExp '<' . AExp                             (rule 17)

	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	AExp           goto state 41
	Exp0           goto state 36

State 29

	AExp -> AExp '+' . AExp                             (rule 18)

	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	AExp           goto state 40
	Exp0           goto state 36

State 30

	AExp -> AExp '-' . AExp                             (rule 19)

	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	AExp           goto state 39
	Exp0           goto state 36

State 31

	AExp -> AExp '*' . AExp                             (rule 20)

	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	AExp           goto state 38
	Exp0           goto state 36

State 32

	Com -> while BExp do . Com                          (rule 8)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 37

State 33

	Args -> Com Args .                                  (rule 6)

	':='           reduce using rule 6


State 34

	Com -> loc Args ':=' . AExp                         (rule 9)

	'('            shift, and enter state 13
	'{'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	AExp           goto state 35
	Exp0           goto state 36

State 35

	Com -> loc Args ':=' AExp .                         (rule 9)
	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)

	if             reduce using rule 9
	else           reduce using rule 9
	while          reduce using rule 9
	skip           reduce using rule 9
	':='           reduce using rule 9
	'<'            shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	';'            reduce using rule 9
	')'            reduce using rule 9
	'}'            reduce using rule 9
	loc            reduce using rule 9
	%eof           reduce using rule 9


State 36

	AExp -> Exp0 .                                      (rule 21)

	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	while          reduce using rule 21
	do             reduce using rule 21
	skip           reduce using rule 21
	':='           reduce using rule 21
	'=='           reduce using rule 21
	'<'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	';'            reduce using rule 21
	land           reduce using rule 21
	lor            reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	loc            reduce using rule 21
	%eof           reduce using rule 21


State 37

	Com -> while BExp do Com .                          (rule 8)
	Com -> Com . ';' Com                                (rule 10)

	if             reduce using rule 8
	else           reduce using rule 8
	while          reduce using rule 8
	skip           reduce using rule 8
	':='           reduce using rule 8
	';'            shift, and enter state 19
			(reduce using rule 8)

	')'            reduce using rule 8
	'}'            reduce using rule 8
	loc            reduce using rule 8
	%eof           reduce using rule 8


State 38

	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)
	AExp -> AExp '*' AExp .                             (rule 20)

	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	while          reduce using rule 20
	do             reduce using rule 20
	skip           reduce using rule 20
	':='           reduce using rule 20
	'=='           reduce using rule 20
	'<'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	';'            reduce using rule 20
	land           reduce using rule 20
	lor            reduce using rule 20
	')'            reduce using rule 20
	'}'            reduce using rule 20
	loc            reduce using rule 20
	%eof           reduce using rule 20


State 39

	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp '-' AExp .                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)

	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	while          reduce using rule 19
	do             reduce using rule 19
	skip           reduce using rule 19
	':='           reduce using rule 19
	'=='           reduce using rule 19
	'<'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	';'            reduce using rule 19
	land           reduce using rule 19
	lor            reduce using rule 19
	')'            reduce using rule 19
	'}'            reduce using rule 19
	loc            reduce using rule 19
	%eof           reduce using rule 19


State 40

	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp '+' AExp .                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)

	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	while          reduce using rule 18
	do             reduce using rule 18
	skip           reduce using rule 18
	':='           reduce using rule 18
	'=='           reduce using rule 18
	'<'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	';'            reduce using rule 18
	land           reduce using rule 18
	lor            reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	loc            reduce using rule 18
	%eof           reduce using rule 18


State 41

	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp '<' AExp .                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)

	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	while          reduce using rule 17
	do             reduce using rule 17
	skip           reduce using rule 17
	':='           reduce using rule 17
	'=='           reduce using rule 17
	'<'            fail
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	';'            reduce using rule 17
	land           reduce using rule 17
	lor            reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	loc            reduce using rule 17
	%eof           reduce using rule 17


State 42

	BExp -> AExp '==' AExp .                            (rule 12)
	AExp -> AExp . '<' AExp                             (rule 17)
	AExp -> AExp . '+' AExp                             (rule 18)
	AExp -> AExp . '-' AExp                             (rule 19)
	AExp -> AExp . '*' AExp                             (rule 20)

	then           reduce using rule 12
	do             reduce using rule 12
	'<'            shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	land           reduce using rule 12
	lor            reduce using rule 12


State 43

	Exp0 -> '(' Com ')' .                               (rule 25)

	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	while          reduce using rule 25
	do             reduce using rule 25
	skip           reduce using rule 25
	':='           reduce using rule 25
	'=='           reduce using rule 25
	'<'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	';'            reduce using rule 25
	land           reduce using rule 25
	lor            reduce using rule 25
	')'            reduce using rule 25
	'}'            reduce using rule 25
	loc            reduce using rule 25
	%eof           reduce using rule 25


State 44

	Exp0 -> '{' Com '}' .                               (rule 26)

	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	while          reduce using rule 26
	do             reduce using rule 26
	skip           reduce using rule 26
	':='           reduce using rule 26
	'=='           reduce using rule 26
	'<'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	';'            reduce using rule 26
	land           reduce using rule 26
	lor            reduce using rule 26
	')'            reduce using rule 26
	'}'            reduce using rule 26
	loc            reduce using rule 26
	%eof           reduce using rule 26


State 45

	BExp -> BExp . land BExp                            (rule 13)
	BExp -> BExp . lor BExp                             (rule 14)
	BExp -> BExp lor BExp .                             (rule 14)

	then           reduce using rule 14
	do             reduce using rule 14
	land           shift, and enter state 22
	lor            reduce using rule 14


State 46

	BExp -> BExp . land BExp                            (rule 13)
	BExp -> BExp land BExp .                            (rule 13)
	BExp -> BExp . lor BExp                             (rule 14)

	then           reduce using rule 13
	do             reduce using rule 13
	land           reduce using rule 13
	lor            reduce using rule 13


State 47

	Com -> if BExp then Com . else Com                  (rule 7)
	Com -> Com . ';' Com                                (rule 10)

	else           shift, and enter state 48
	';'            shift, and enter state 19


State 48

	Com -> if BExp then Com else . Com                  (rule 7)

	if             shift, and enter state 3
	while          shift, and enter state 4
	skip           shift, and enter state 5
	loc            shift, and enter state 6

	Com            goto state 49

State 49

	Com -> if BExp then Com else Com .                  (rule 7)
	Com -> Com . ';' Com                                (rule 10)

	if             reduce using rule 7
	else           reduce using rule 7
	while          reduce using rule 7
	skip           reduce using rule 7
	':='           reduce using rule 7
	';'            shift, and enter state 19
			(reduce using rule 7)

	')'            reduce using rule 7
	'}'            reduce using rule 7
	loc            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 27
Number of terminals: 23
Number of non-terminals: 9
Number of states: 50
