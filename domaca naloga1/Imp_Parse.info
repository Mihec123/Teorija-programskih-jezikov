-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Imp_Parse.y
-----------------------------------------------------------------------------

state 43 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_imp_parse -> Com                            (0)
	Com -> Com ';' Com                                 (1)
	Com -> Com1                                        (2)
	Com1 -> if BExp then Com else Com                  (3)
	Com1 -> while BExp do '{' Com '}'                  (4)
	Com1 -> loc ':=' AExp                              (5)
	Com1 -> skip                                       (6)
	BExp -> AExp '==' AExp                             (7)
	BExp -> BExp land BExp                             (8)
	BExp -> BExp lor BExp                              (9)
	BExp -> '!' BExp                                   (10)
	BExp -> AExp '<' AExp                              (11)
	BExp -> boolean                                    (12)
	AExp -> AExp '+' AExp                              (13)
	AExp -> AExp '-' AExp                              (14)
	AExp -> AExp '*' AExp                              (15)
	AExp -> Exp0                                       (16)
	Exp0 -> num                                        (17)
	Exp0 -> loc                                        (18)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	if             { KEY "if" }
	then           { KEY "then" }
	else           { KEY "else" }
	while          { KEY "while" }
	do             { KEY "do" }
	skip           { KEY "skip" }
	':='           { ASS ":=" }
	'=='           { OP "==" }
	'<'            { OP "<" }
	'+'            { OP "+" }
	'-'            { OP "-" }
	'*'            { OP "*" }
	'!'            { OP "!" }
	land           { OP "&&" }
	lor            { OP "||" }
	'{'            { PUNC "{" }
	'}'            { PUNC "}" }
	';'            { PUNC ";" }
	num            { NUM $$ }
	boolean        { BOOLEAN $$ }
	loc            { LOC $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_imp_parse rule  0
	Com             rules 1, 2
	Com1            rules 3, 4, 5, 6
	BExp            rules 7, 8, 9, 10, 11, 12
	AExp            rules 13, 14, 15, 16
	Exp0            rules 17, 18

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	loc            shift, and enter state 7

	Com            goto state 8
	Com1           goto state 3

State 1


	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	loc            shift, and enter state 7

	Com            goto state 2
	Com1           goto state 3

State 2

	Com -> Com . ';' Com                                (rule 1)

	';'            shift, and enter state 9


State 3

	Com -> Com1 .                                       (rule 2)

	else           reduce using rule 2
	'}'            reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	Com1 -> if . BExp then Com else Com                 (rule 3)

	'!'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 18
	AExp           goto state 12
	Exp0           goto state 13

State 5

	Com1 -> while . BExp do '{' Com '}'                 (rule 4)

	'!'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 11
	AExp           goto state 12
	Exp0           goto state 13

State 6

	Com1 -> skip .                                      (rule 6)

	else           reduce using rule 6
	'}'            reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 7

	Com1 -> loc . ':=' AExp                             (rule 5)

	':='           shift, and enter state 10


State 8

	%start_imp_parse -> Com .                           (rule 0)
	Com -> Com . ';' Com                                (rule 1)

	';'            shift, and enter state 9
	%eof           accept


State 9

	Com -> Com ';' . Com                                (rule 1)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	loc            shift, and enter state 7

	Com            goto state 30
	Com1           goto state 3

State 10

	Com1 -> loc ':=' . AExp                             (rule 5)

	num            shift, and enter state 15
	loc            shift, and enter state 17

	AExp           goto state 29
	Exp0           goto state 13

State 11

	Com1 -> while BExp . do '{' Com '}'                 (rule 4)
	BExp -> BExp . land BExp                            (rule 8)
	BExp -> BExp . lor BExp                             (rule 9)

	do             shift, and enter state 28
	land           shift, and enter state 20
	lor            shift, and enter state 21


State 12

	BExp -> AExp . '==' AExp                            (rule 7)
	BExp -> AExp . '<' AExp                             (rule 11)
	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)

	'=='           shift, and enter state 23
	'<'            shift, and enter state 24
	'+'            shift, and enter state 25
	'-'            shift, and enter state 26
	'*'            shift, and enter state 27


State 13

	AExp -> Exp0 .                                      (rule 16)

	then           reduce using rule 16
	else           reduce using rule 16
	do             reduce using rule 16
	'=='           reduce using rule 16
	'<'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	land           reduce using rule 16
	lor            reduce using rule 16
	'}'            reduce using rule 16
	';'            reduce using rule 16
	%eof           reduce using rule 16


State 14

	BExp -> '!' . BExp                                  (rule 10)

	'!'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 22
	AExp           goto state 12
	Exp0           goto state 13

State 15

	Exp0 -> num .                                       (rule 17)

	then           reduce using rule 17
	else           reduce using rule 17
	do             reduce using rule 17
	'=='           reduce using rule 17
	'<'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	land           reduce using rule 17
	lor            reduce using rule 17
	'}'            reduce using rule 17
	';'            reduce using rule 17
	%eof           reduce using rule 17


State 16

	BExp -> boolean .                                   (rule 12)

	then           reduce using rule 12
	do             reduce using rule 12
	land           reduce using rule 12
	lor            reduce using rule 12


State 17

	Exp0 -> loc .                                       (rule 18)

	then           reduce using rule 18
	else           reduce using rule 18
	do             reduce using rule 18
	'=='           reduce using rule 18
	'<'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	land           reduce using rule 18
	lor            reduce using rule 18
	'}'            reduce using rule 18
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 18

	Com1 -> if BExp . then Com else Com                 (rule 3)
	BExp -> BExp . land BExp                            (rule 8)
	BExp -> BExp . lor BExp                             (rule 9)

	then           shift, and enter state 19
	land           shift, and enter state 20
	lor            shift, and enter state 21


State 19

	Com1 -> if BExp then . Com else Com                 (rule 3)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	loc            shift, and enter state 7

	Com            goto state 39
	Com1           goto state 3

State 20

	BExp -> BExp land . BExp                            (rule 8)

	'!'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 38
	AExp           goto state 12
	Exp0           goto state 13

State 21

	BExp -> BExp lor . BExp                             (rule 9)

	'!'            shift, and enter state 14
	num            shift, and enter state 15
	boolean        shift, and enter state 16
	loc            shift, and enter state 17

	BExp           goto state 37
	AExp           goto state 12
	Exp0           goto state 13

State 22

	BExp -> BExp . land BExp                            (rule 8)
	BExp -> BExp . lor BExp                             (rule 9)
	BExp -> '!' BExp .                                  (rule 10)

	then           reduce using rule 10
	do             reduce using rule 10
	land           reduce using rule 10
	lor            reduce using rule 10


State 23

	BExp -> AExp '==' . AExp                            (rule 7)

	num            shift, and enter state 15
	loc            shift, and enter state 17

	AExp           goto state 36
	Exp0           goto state 13

State 24

	BExp -> AExp '<' . AExp                             (rule 11)

	num            shift, and enter state 15
	loc            shift, and enter state 17

	AExp           goto state 35
	Exp0           goto state 13

State 25

	AExp -> AExp '+' . AExp                             (rule 13)

	num            shift, and enter state 15
	loc            shift, and enter state 17

	AExp           goto state 34
	Exp0           goto state 13

State 26

	AExp -> AExp '-' . AExp                             (rule 14)

	num            shift, and enter state 15
	loc            shift, and enter state 17

	AExp           goto state 33
	Exp0           goto state 13

State 27

	AExp -> AExp '*' . AExp                             (rule 15)

	num            shift, and enter state 15
	loc            shift, and enter state 17

	AExp           goto state 32
	Exp0           goto state 13

State 28

	Com1 -> while BExp do . '{' Com '}'                 (rule 4)

	'{'            shift, and enter state 31


State 29

	Com1 -> loc ':=' AExp .                             (rule 5)
	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)

	else           reduce using rule 5
	'+'            shift, and enter state 25
	'-'            shift, and enter state 26
	'*'            shift, and enter state 27
	'}'            reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 30

	Com -> Com . ';' Com                                (rule 1)
	Com -> Com ';' Com .                                (rule 1)

	else           reduce using rule 1
	'}'            reduce using rule 1
	';'            shift, and enter state 9
	%eof           reduce using rule 1


State 31

	Com1 -> while BExp do '{' . Com '}'                 (rule 4)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	loc            shift, and enter state 7

	Com            goto state 41
	Com1           goto state 3

State 32

	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)
	AExp -> AExp '*' AExp .                             (rule 15)

	then           reduce using rule 15
	else           reduce using rule 15
	do             reduce using rule 15
	'=='           reduce using rule 15
	'<'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	land           reduce using rule 15
	lor            reduce using rule 15
	'}'            reduce using rule 15
	';'            reduce using rule 15
	%eof           reduce using rule 15


State 33

	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp '-' AExp .                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)

	then           reduce using rule 14
	else           reduce using rule 14
	do             reduce using rule 14
	'=='           reduce using rule 14
	'<'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	land           reduce using rule 14
	lor            reduce using rule 14
	'}'            reduce using rule 14
	';'            reduce using rule 14
	%eof           reduce using rule 14


State 34

	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp '+' AExp .                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)

	then           reduce using rule 13
	else           reduce using rule 13
	do             reduce using rule 13
	'=='           reduce using rule 13
	'<'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	land           reduce using rule 13
	lor            reduce using rule 13
	'}'            reduce using rule 13
	';'            reduce using rule 13
	%eof           reduce using rule 13


State 35

	BExp -> AExp '<' AExp .                             (rule 11)
	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)

	then           reduce using rule 11
	do             reduce using rule 11
	'+'            shift, and enter state 25
	'-'            shift, and enter state 26
	'*'            shift, and enter state 27
	land           reduce using rule 11
	lor            reduce using rule 11


State 36

	BExp -> AExp '==' AExp .                            (rule 7)
	AExp -> AExp . '+' AExp                             (rule 13)
	AExp -> AExp . '-' AExp                             (rule 14)
	AExp -> AExp . '*' AExp                             (rule 15)

	then           reduce using rule 7
	do             reduce using rule 7
	'+'            shift, and enter state 25
	'-'            shift, and enter state 26
	'*'            shift, and enter state 27
	land           reduce using rule 7
	lor            reduce using rule 7


State 37

	BExp -> BExp . land BExp                            (rule 8)
	BExp -> BExp . lor BExp                             (rule 9)
	BExp -> BExp lor BExp .                             (rule 9)

	then           reduce using rule 9
	do             reduce using rule 9
	land           shift, and enter state 20
	lor            reduce using rule 9


State 38

	BExp -> BExp . land BExp                            (rule 8)
	BExp -> BExp land BExp .                            (rule 8)
	BExp -> BExp . lor BExp                             (rule 9)

	then           reduce using rule 8
	do             reduce using rule 8
	land           reduce using rule 8
	lor            reduce using rule 8


State 39

	Com -> Com . ';' Com                                (rule 1)
	Com1 -> if BExp then Com . else Com                 (rule 3)

	else           shift, and enter state 40
	';'            shift, and enter state 9


State 40

	Com1 -> if BExp then Com else . Com                 (rule 3)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	loc            shift, and enter state 7

	Com            goto state 43
	Com1           goto state 3

State 41

	Com -> Com . ';' Com                                (rule 1)
	Com1 -> while BExp do '{' Com . '}'                 (rule 4)

	'}'            shift, and enter state 42
	';'            shift, and enter state 9


State 42

	Com1 -> while BExp do '{' Com '}' .                 (rule 4)

	else           reduce using rule 4
	'}'            reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 43

	Com -> Com . ';' Com                                (rule 1)
	Com1 -> if BExp then Com else Com .                 (rule 3)

	else           reduce using rule 3
	'}'            reduce using rule 3
	';'            shift, and enter state 9
			(reduce using rule 3)

	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 19
Number of terminals: 21
Number of non-terminals: 6
Number of states: 44
